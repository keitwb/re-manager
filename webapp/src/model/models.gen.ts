/*
 * THIS FILE IS GENERATED FROM models/generate.sh
 * DO NOT EDIT THIS FILE!
 */
// tslint:disable

import { ObjectID } from "bson";

/**
 * A set of Mongo collection names for the various models
 */
export enum CollectionName {
    Leases = "leases",
    MediaFiles = "media.files",
    Notes = "notes",
    Parties = "parties",
    Properties = "properties",
    Users = "users",
}

/**
 * An insurance policy that applies to one or more properties
 */
export interface InsurancePolicy {
    /**
     * A placeholder where errors concerning the object can go
     */
    _error?: string;
    _id:     ObjectID;
    /**
     * The id of the user that created this object
     */
    createdBy?: ObjectID;
    /**
     * The date the object was first created
     */
    createdDate?: string;
    /**
     * The id of the user that last modified this object
     */
    lastModifiedBy?: ObjectID;
    /**
     * The date of the last update to the object
     */
    modifiedDate?: string;
    description?:  string;
    endDate?:      string;
    mediaIds?:     ObjectID[];
    startDate?:    string;
}

/**
 * A JSON-encoded BSON ObjectId
 *
 * The id of the user that created this object
 *
 * The id of the user that last modified this object
 */
export interface OID {
    $oid: string;
}

/**
 * A lease for one or more properties
 */
export interface Lease {
    /**
     * A placeholder where errors concerning the object can go
     */
    _error?: string;
    _id:     ObjectID;
    /**
     * The id of the user that created this object
     */
    createdBy?: ObjectID;
    /**
     * The date the object was first created
     */
    createdDate?: string;
    /**
     * The id of the user that last modified this object
     */
    lastModifiedBy?: ObjectID;
    /**
     * The date of the last update to the object
     */
    modifiedDate?: string;
    description?:  string;
    leaseType?:    LeaseType;
    lessees?:      ObjectID[];
    notes?:        Note[];
    rate?:         number;
    startDate?:    string;
    termLength?:   number;
    termUnit?:     TermUnit;
}

export enum LeaseType {
    Gross = "gross",
    N = "N",
    Nn = "NN",
    Nnn = "NNN",
    Option = "option",
}

/**
 * A note that gives an update on an item
 */
export interface Note {
    /**
     * A placeholder where errors concerning the object can go
     */
    _error?: string;
    _id:     ObjectID;
    /**
     * The id of the user that created this object
     */
    createdBy?: ObjectID;
    /**
     * The date the object was first created
     */
    createdDate?: string;
    /**
     * The id of the user that last modified this object
     */
    lastModifiedBy?: ObjectID;
    /**
     * The date of the last update to the object
     */
    modifiedDate?: string;
    media?:        ObjectID[];
    note?:         string;
    title?:        string;
}

export enum TermUnit {
    Months = "months",
    Quarters = "quarters",
    Years = "years",
}

/**
 * A media file that is associated with a property, lease, note, etc.
 */
export interface Media {
    /**
     * A placeholder where errors concerning the object can go
     */
    _error?: string;
    _id:     ObjectID;
    /**
     * The id of the user that created this object
     */
    createdBy?: ObjectID;
    /**
     * The date the object was first created
     */
    createdDate?: string;
    /**
     * The id of the user that last modified this object
     */
    lastModifiedBy?: ObjectID;
    /**
     * The date of the last update to the object
     */
    modifiedDate?: string;
    chunkSize?:    number;
    contentType?:  string;
    filename?:     string;
    length?:       number;
    md5?:          string;
    uploadDate?:   string;
    metadata?:     Metadata;
}

export interface Metadata {
    description?: string;
    tags?:        string[];
}

export interface MongoDoc {
    /**
     * A placeholder where errors concerning the object can go
     */
    _error?: string;
    _id:     ObjectID;
    /**
     * The id of the user that created this object
     */
    createdBy?: ObjectID;
    /**
     * The date the object was first created
     */
    createdDate?: string;
    /**
     * The id of the user that last modified this object
     */
    lastModifiedBy?: ObjectID;
    /**
     * The date of the last update to the object
     */
    modifiedDate?: string;
}

/**
 * A person or organization/company that interacts with real estate in some way, e.g. owner,
 * lessee, contractors, etc.
 */
export interface Party {
    /**
     * A placeholder where errors concerning the object can go
     */
    _error?: string;
    _id:     ObjectID;
    /**
     * The id of the user that created this object
     */
    createdBy?: ObjectID;
    /**
     * The date the object was first created
     */
    createdDate?: string;
    /**
     * The id of the user that last modified this object
     */
    lastModifiedBy?: ObjectID;
    /**
     * The date of the last update to the object
     */
    modifiedDate?: string;
    address?:      string;
    city?:         string;
    name?:         string;
    notes?:        Note;
    phone?:        string;
    state?:        string;
    subParties?:   Party[];
    type?:         Type;
    zipcode?:      string;
}

export enum Type {
    Company = "company",
    Person = "person",
}

/**
 * A set of one or more parcels that constitute a single logic piece of real estate
 */
export interface Property {
    /**
     * A placeholder where errors concerning the object can go
     */
    _error?: string;
    _id:     ObjectID;
    /**
     * The id of the user that created this object
     */
    createdBy?: ObjectID;
    /**
     * The date the object was first created
     */
    createdDate?: string;
    /**
     * The id of the user that last modified this object
     */
    lastModifiedBy?: ObjectID;
    /**
     * The date of the last update to the object
     */
    modifiedDate?: string;
    acreage?:      number;
    /**
     * WKT of the boundary of the property
     */
    boundary?:                 string;
    contactIds?:               ObjectID[];
    county?:                   string;
    description?:              string;
    desiredRentCents?:         number;
    desiredSalesPriceDollars?: number;
    insurancePolicyIds?:       ObjectID[];
    latitude?:                 number;
    leaseIds?:                 ObjectID[];
    longitude?:                number;
    mediaIds?:                 ObjectID[];
    name?:                     string;
    noteIds?:                  ObjectID[];
    owners?:                   Owner[];
    pinNumbers?:               string[];
    propType?:                 PropType;
    state?:                    string;
    tags?:                     string[];
    taxBills?:                 { [key: string]: { [key: string]: TaxBill } };
    taxPropInfo?:              { [key: string]: TaxPropInfo };
    taxRefreshRequested?:      boolean;
}

export interface Owner {
    id?:      ObjectID;
    portion?: number;
}

export enum PropType {
    Commercial = "commercial",
    Industrial = "industrial",
    Land = "land",
    Residential = "residential",
}

export interface TaxBill {
    buildingAssessedCents?: number;
    dueDate?:               string;
    landAssessedCents?:     number;
    lineItems?:             LineItem[];
    miscAssessedCents?:     number;
    payments?:              Payment[];
    totalAssessedCents?:    number;
}

export interface LineItem {
    amountCents?: number;
    description?: string;
}

export interface Payment {
    amountCents?: number;
    paymentDate?: string;
}

export interface TaxPropInfo {
    assessmentDate?:         string;
    buildingAppraisedCents?: number;
    landAppraisedCents?:     number;
    legalDescription?:       string;
    miscAppraisedCents?:     number;
    neighborhood?:           string;
    ownerAddress?:           string;
    ownerName?:              string;
    propertyClass?:          string;
    situsAddress?:           string;
    taxDistrict?:            string;
    totalAppraisedCents?:    number;
    zoning?:                 string;
}

/**
 * A user in the system
 */
export interface User {
    /**
     * A placeholder where errors concerning the object can go
     */
    _error?: string;
    _id:     ObjectID;
    /**
     * The id of the user that created this object
     */
    createdBy?: ObjectID;
    /**
     * The date the object was first created
     */
    createdDate?: string;
    /**
     * The id of the user that last modified this object
     */
    lastModifiedBy?: ObjectID;
    /**
     * The date of the last update to the object
     */
    modifiedDate?:   string;
    disabled:        boolean;
    email?:          string;
    firstName?:      string;
    lastName?:       string;
    passwordHashed?: string;
    sessionIds?:     string[];
    username:        string;
}
